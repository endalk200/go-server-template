// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: command.sql

package database

import (
	"context"
	"database/sql"
)

const addCommand = `-- name: AddCommand :exec
INSERT INTO Command (
  name, description, command
) VALUES (
  ?, ?, ?
)
`

type AddCommandParams struct {
	Name        string
	Description sql.NullString
	Command     sql.NullString
}

func (q *Queries) AddCommand(ctx context.Context, arg AddCommandParams) error {
	_, err := q.db.ExecContext(ctx, addCommand, arg.Name, arg.Description, arg.Command)
	return err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE FROM Command
WHERE id = ?
`

func (q *Queries) DeleteCommand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommand, id)
	return err
}

const getCommand = `-- name: GetCommand :one
SELECT id, name, description, command FROM Command
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCommand(ctx context.Context, id int64) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommand, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Command,
	)
	return i, err
}

const listCommands = `-- name: ListCommands :many
SELECT id, name, description, command FROM Command
ORDER BY name
`

func (q *Queries) ListCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Command,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommand = `-- name: UpdateCommand :exec
UPDATE Command
set name = ?,
description = ?,
command = ?
WHERE id = ?
`

type UpdateCommandParams struct {
	Name        string
	Description sql.NullString
	Command     sql.NullString
	ID          int64
}

func (q *Queries) UpdateCommand(ctx context.Context, arg UpdateCommandParams) error {
	_, err := q.db.ExecContext(ctx, updateCommand,
		arg.Name,
		arg.Description,
		arg.Command,
		arg.ID,
	)
	return err
}
