// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package database

import (
	"context"
	"database/sql"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO Collection (
  name, description
) VALUES (
  ?, ?
)
RETURNING id, name, description
`

type CreateCollectionParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.Name, arg.Description)
	var i Collection
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM Collection
WHERE id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT id, name, description FROM Collection
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCollection(ctx context.Context, id int64) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollection, id)
	var i Collection
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT id, name, description FROM Collection
ORDER BY name
`

func (q *Queries) ListCollections(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE Collection
set name = ?,
description = ?
WHERE id = ?
`

type UpdateCollectionParams struct {
	Name        string
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.db.ExecContext(ctx, updateCollection, arg.Name, arg.Description, arg.ID)
	return err
}
