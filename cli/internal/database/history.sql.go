// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: history.sql

package database

import (
	"context"
)

const getHistory = `-- name: GetHistory :one
SELECT id, name, description, command FROM history 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHistory(ctx context.Context, id interface{}) (History, error) {
	row := q.db.QueryRow(ctx, getHistory, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Command,
	)
	return i, err
}

const listHistory = `-- name: ListHistory :many
SELECT id, name, description, command FROM history 
ORDER BY name
`

func (q *Queries) ListHistory(ctx context.Context) ([]History, error) {
	rows, err := q.db.Query(ctx, listHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Command,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
